#!/bin/bash
# Flask Backend Fix Guide for donatello-flaskpy
# Run this script or follow these steps manually

echo "üîß Fixing Flask Backend Issues..."
echo "================================="

echo ""
echo "üìç Issue 1: Gemini Model Error"
echo "-------------------------------"
echo "In your ~/Sites/donatello-flaskpy/app.py file:"
echo ""
echo "‚ùå CHANGE THIS:"
echo "model = genai.GenerativeModel('gemini-pro')"
echo ""
echo "‚úÖ TO THIS:"
echo "model = genai.GenerativeModel('gemini-1.5-flash')"
echo ""
echo "Available working models:"
echo "- gemini-1.5-flash (recommended - faster, cheaper)"
echo "- gemini-1.5-pro (for complex tasks)"
echo ""

echo "üìç Issue 2: CORS Configuration"
echo "------------------------------"
echo "Add these imports at the top of app.py:"
echo ""
echo "from flask_cors import CORS"
echo ""
echo "After creating your Flask app, add:"
echo "CORS(app, origins=['http://localhost:3000', 'http://localhost:3001'])"
echo ""
echo "If flask-cors is not installed:"
echo "pip install flask-cors"
echo ""

echo "üìç Issue 3: Fake Walrus Data"
echo "----------------------------"
echo "Your Flask backend is returning placeholder data instead of real Walrus uploads."
echo "Check your Walrus upload logic in app.py and ensure:"
echo "1. Walrus CLI is properly installed and configured"
echo "2. Your upload endpoints are actually calling Walrus"
echo "3. You're not returning hardcoded blob IDs"
echo ""
echo "Example real Walrus upload code:"
echo "import subprocess"
echo "result = subprocess.run(['walrus', 'store', file_path], capture_output=True, text=True)"
echo "blob_id = result.stdout.strip()"
echo ""

echo "üìç Issue 4: Environment Variables"
echo "--------------------------------"
echo "Make sure you have these environment variables set:"
echo "export GOOGLE_AI_API_KEY='your_gemini_api_key'"
echo "export WALRUS_CONFIG_PATH='path_to_walrus_config'"
echo ""

echo "üöÄ After making these changes:"
echo "1. Save your app.py file"
echo "2. Restart your Flask server"
echo "3. Test the endpoints manually:"
echo "   curl http://127.0.0.1:5000/health"
echo "   curl -X POST -H 'Content-Type: application/json' -d '{\"message\":\"test\"}' http://127.0.0.1:5000/chat"
echo ""

echo "‚úÖ Your Flask backend should then work properly with the Next.js frontend!"
